stages:
  - build
  - validate
  - deploy

.before_script_template: &before_script_template
  before_script:
    - |
      if [[ "$ACCOUNT_OWNER" == "revyrie" ]]; then
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_REVYRIE
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_REVYRIE
        export AWS_DEFAULT_REGION=$REGION_REVYRIE
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_REVYRIE
      else
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_CLIENT
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_CLIENT
        export AWS_DEFAULT_REGION=$REGION_CLIENT
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_CLIENT
      fi

.build_template: &build_template
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    DOCKER_BUILDKIT: 1
    DOCKER_HOST: tcp://docker:2375
  stage: build
  artifacts:
    reports:
      dotenv: image.env
  before_script:
    - apk add --no-cache aws-cli
    - |
      if [[ "$ACCOUNT_OWNER" == "revyrie" ]]; then
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_REVYRIE
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_REVYRIE
        export AWS_DEFAULT_REGION=$REGION_REVYRIE
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_REVYRIE
      else
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_CLIENT
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_CLIENT
        export AWS_DEFAULT_REGION=$REGION_CLIENT
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_CLIENT
      fi
  script:
    - echo "🔐 Logging in to ECR"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - export IMAGE_TAG="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_NAME:$CI_COMMIT_SHORT_SHA"
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - echo "IMAGE_TAG=$IMAGE_TAG" >> image.env

.validate_template: &validate_template
  <<: *before_script_template
  image: amazon/aws-cli:latest
  stage: validate
  script:
    - echo "Validating ECS task def for $DEPLOY_ENV"
    - sed -i "s|<IMAGE_URI>|$IMAGE_TAG|g" .devops/task-def.$DEPLOY_ENV.json
    - aws ecs register-task-definition --cli-input-json file://.devops/task-def.$DEPLOY_ENV.json --dry-run
  artifacts:
    paths:
      - .devops/task-def.$DEPLOY_ENV.json

.deploy_template: &deploy_template
  <<: *before_script_template
  image: amazon/aws-cli:latest
  stage: deploy
  script:
    - echo "Deploying to ECS - $DEPLOY_ENV"
    - aws ecs register-task-definition --cli-input-json file://.devops/task-def.$DEPLOY_ENV.json
    - aws ecs update-service --cluster $CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment

# === ENV: DEV ===
build_dev:
  <<: *build_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
    ECR_REPO_NAME: streambet-dev
  only: [dev]

validate_dev:
  <<: *validate_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
  dependencies: [build_dev]
  only: [dev]

deploy_dev:
  <<: *deploy_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
    ECS_SERVICE_NAME: streambet-dev
    CLUSTER_NAME: revyrie-cluster
  dependencies: [validate_dev]
  only: [dev]
