stages:
  - build
  - validate
  - deploy

services:
  - name: docker:dind
    alias: docker
    command: ["--tls=false"]

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

.before_script_template: &before_script_template
  before_script:
    - |
      if [[ "$ACCOUNT_OWNER" == "revyrie" ]]; then
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_REVYRIE
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_REVYRIE
        export AWS_DEFAULT_REGION=$REGION_REVYRIE
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_REVYRIE
      else
        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_CLIENT
        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_CLIENT
        export AWS_DEFAULT_REGION=$REGION_CLIENT
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_CLIENT
      fi

.build_template: &build_template
  <<: *before_script_template
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: build
  artifacts:
    reports:
      dotenv: image.env
  script:
    - echo "Logging in to ECR"
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - export IMAGE_TAG="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_NAME:$CI_COMMIT_SHORT_SHA"
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - echo "IMAGE_TAG=$IMAGE_TAG" >> image.env

.validate_template: &validate_template
  <<: *before_script_template
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: validate
  script:
    - echo "Validating ECS task def for $DEPLOY_ENV"
    - sed -i "s|<IMAGE_URI>|$IMAGE_TAG|g" .devops/task-def.$DEPLOY_ENV.json
    - aws ecs register-task-definition --cli-input-json file://.devops/task-def.$DEPLOY_ENV.json
  artifacts:
    paths:
      - .devops/task-def.$DEPLOY_ENV.json

.deploy_template: &deploy_template
  <<: *before_script_template
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: deploy
  script:
    - echo "Deploying to ECS - $DEPLOY_ENV"
    - aws ecs register-task-definition --cli-input-json file://.devops/task-def.$DEPLOY_ENV.json
    - aws ecs update-service --cluster $CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_SERVICE_NAME --desired-count 1 --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
    - echo "Waiting for ECS service deployment to stabilize..."

# Wait for service to stabilize
    - >
      aws ecs wait services-stable \
        --cluster $CLUSTER_NAME \
        --services $ECS_SERVICE_NAME
    - echo "Deployment complete and stable."

# === ENV: DEV ===
build_dev:
  <<: *build_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
    ECR_REPO_NAME: streambet-dev
  only: [dev]

validate_dev:
  <<: *validate_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
  dependencies: [build_dev]
  only: [dev]

deploy_dev:
  <<: *deploy_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: dev
    ECS_SERVICE_NAME: streambet-dev
    CLUSTER_NAME: revyrie-cluster
  dependencies: [validate_dev]
  only: [dev]

# === ENV: QA ===
build_qa:
  <<: *build_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: qa
    ECR_REPO_NAME: streambet-qa
  only: [qa]

validate_qa:
  <<: *validate_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: qa
  dependencies: [build_qa]
  only: [qa]

deploy_qa:
  <<: *deploy_template
  variables:
    ACCOUNT_OWNER: revyrie
    DEPLOY_ENV: qa
    ECS_SERVICE_NAME: streambet-qa
    CLUSTER_NAME: revyrie-cluster
  dependencies: [validate_qa]
  only: [qa]

# === ENV: Stag ===
build_stag:
  <<: *build_template
  variables:
    ACCOUNT_OWNER: client
    DEPLOY_ENV: stag
    ECR_REPO_NAME: streambet-stag
  only: [stag]

validate_stag:
  <<: *validate_template
  variables:
    ACCOUNT_OWNER: client
    DEPLOY_ENV: stag
  dependencies: [build_stag]
  only: [stag]

deploy_stag:
  <<: *deploy_template
  variables:
    ACCOUNT_OWNER: client
    DEPLOY_ENV: stag
    ECS_SERVICE_NAME: streambet-stag
    CLUSTER_NAME: streambet-cluster
  dependencies: [validate_stag]
  only: [stag]
